// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using BlockchainTx;
//
//    var blockchainTx = BlockchainTx.FromJson(jsonString);

namespace CryptoCityWallet.ExternalUtilities.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BlockchainTx
    {
        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("total_received")]
        public long TotalReceived { get; set; }

        [JsonProperty("total_sent")]
        public long TotalSent { get; set; }

        [JsonProperty("balance")]
        public long Balance { get; set; }

        [JsonProperty("unconfirmed_balance")]
        public long UnconfirmedBalance { get; set; }

        [JsonProperty("final_balance")]
        public long FinalBalance { get; set; }

        [JsonProperty("n_tx")]
        public long NTx { get; set; }

        [JsonProperty("unconfirmed_n_tx")]
        public long UnconfirmedNTx { get; set; }

        [JsonProperty("final_n_tx")]
        public long FinalNTx { get; set; }

        [JsonProperty("txs")]
        public List<Tx> Txs { get; set; }
    }

    public partial class Tx
    {
        [JsonProperty("block_hash")]
        public string BlockHash { get; set; }

        [JsonProperty("block_height")]
        public long BlockHeight { get; set; }

        [JsonProperty("block_index")]
        public long BlockIndex { get; set; }

        [JsonProperty("hash")]
        public string Hash { get; set; }

        [JsonProperty("addresses")]
        public List<string> Addresses { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("fees")]
        public long Fees { get; set; }

        [JsonProperty("size")]
        public long Size { get; set; }

        [JsonProperty("preference")]
        public string Preference { get; set; }

        [JsonProperty("relayed_by")]
        public string RelayedBy { get; set; }

        [JsonProperty("confirmed")]
        public DateTimeOffset Confirmed { get; set; }

        [JsonProperty("received")]
        public DateTimeOffset Received { get; set; }

        [JsonProperty("ver")]
        public long Ver { get; set; }

        [JsonProperty("double_spend")]
        public bool DoubleSpend { get; set; }

        [JsonProperty("vin_sz")]
        public long VinSz { get; set; }

        [JsonProperty("vout_sz")]
        public long VoutSz { get; set; }

        [JsonProperty("confirmations")]
        public long Confirmations { get; set; }

        [JsonProperty("confidence")]
        public long Confidence { get; set; }

        [JsonProperty("inputs")]
        public List<Input> Inputs { get; set; }

        [JsonProperty("outputs")]
        public List<Output> Outputs { get; set; }
    }

    public partial class Input
    {
        [JsonProperty("prev_hash")]
        public string PrevHash { get; set; }

        [JsonProperty("output_index")]
        public long OutputIndex { get; set; }

        [JsonProperty("script")]
        public string Script { get; set; }

        [JsonProperty("output_value")]
        public long OutputValue { get; set; }

        [JsonProperty("sequence")]
        public long Sequence { get; set; }

        [JsonProperty("addresses")]
        public List<string> Addresses { get; set; }

        [JsonProperty("script_type")]
        public string ScriptType { get; set; }

        [JsonProperty("age")]
        public long Age { get; set; }
    }

    public partial class Output
    {
        [JsonProperty("value")]
        public long Value { get; set; }

        [JsonProperty("script")]
        public string Script { get; set; }

        [JsonProperty("addresses")]
        public List<string> Addresses { get; set; }

        [JsonProperty("script_type")]
        public string ScriptType { get; set; }
    }

    public partial class BlockchainTx
    {
        public static BlockchainTx FromJson(string json) => JsonConvert.DeserializeObject<BlockchainTx>(json, CryptoCityWallet.ExternalUtilities.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BlockchainTx self) => JsonConvert.SerializeObject(self, CryptoCityWallet.ExternalUtilities.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
